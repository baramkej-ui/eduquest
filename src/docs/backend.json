{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user in the EduQuest application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "role": {
          "type": "string",
          "description": "Role of the user (e.g., 'admin', 'teacher', 'student')."
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the user."
        },
        "photoURL": {
          "type": "string",
          "description": "URL of the user's profile picture.",
          "format": "uri"
        },
        "nationality": {
          "type": "string",
          "description": "Nationality of the user."
        }
      },
      "required": [
        "id",
        "email",
        "role"
      ]
    },
    "Problem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Problem",
      "type": "object",
      "description": "Represents an educational problem or question within a test.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Problem entity."
        },
        "topic": {
          "type": "string",
          "description": "The main category of the test (e.g., 'reading', 'listening')."
        },
        "difficulty": {
          "type": "string",
          "enum": [
            "easy",
            "medium",
            "hard"
          ],
          "description": "Difficulty level of the problem."
        },
        "questionText": {
          "type": "string",
          "description": "The actual question text."
        },
        "problemType": {
          "type": "string",
          "enum": [
            "multiple-choice",
            "fill-in-the-blank",
            "passage-comprehension",
            "audio-comprehension",
            "short-answer",
            "essay"
          ],
          "description": "The specific type of the problem."
        },
        "correctAnswer": {
          "type": "string",
          "description": "The correct answer to the problem."
        },
        "possibleAnswers": {
          "type": "array",
          "description": "An array of possible answers for multiple-choice questions.",
          "items": {
            "type": "string"
          }
        },
        "passage": {
          "type": "string",
          "description": "A reading passage associated with the question."
        },
        "audioUrl": {
          "type": "string",
          "description": "URL to an audio file for listening questions.",
          "format": "uri"
        }
      },
      "required": [
        "topic",
        "difficulty",
        "questionText",
        "problemType"
      ]
    },
    "Result": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Result",
      "type": "object",
      "description": "Represents the result of a user attempting a problem.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Result entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Result)"
        },
        "problemId": {
          "type": "string",
          "description": "Reference to Problem. (Relationship: Problem 1:N Result)"
        },
        "isCorrect": {
          "type": "boolean",
          "description": "Indicates whether the user answered the problem correctly."
        },
        "submissionTime": {
          "type": "string",
          "description": "Timestamp of when the user submitted the answer.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "problemId",
        "isCorrect",
        "submissionTime"
      ]
    },
    "Test": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Test",
      "type": "object",
      "description": "Represents a type of level test, like Reading or Listening.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the test (e.g., 'reading')."
        },
        "title": {
          "type": "string",
          "description": "The display title of the test (e.g., 'Reading Test')."
        },
        "totalTime": {
          "type": "number",
          "description": "The total allocated time for the test in minutes."
        }
      },
      "required": [
        "id",
        "title",
        "totalTime"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/entities/User"
          },
          "description": "Stores user profiles."
        }
      },
      {
        "path": "/tests/{testId}",
        "definition": {
          "entityName": "Test",
          "schema": {
            "$ref": "#/entities/Test"
          },
          "description": "Stores metadata for each level test type."
        }
      },
      {
        "path": "/tests/{testId}/problems/{problemId}",
        "definition": {
          "entityName": "Problem",
          "schema": {
            "$ref": "#/entities/Problem"
          },
          "description": "Stores all problems for a specific test."
        }
      },
      {
        "path": "/users/{userId}/results/{resultId}",
        "definition": {
          "entityName": "Result",
          "schema": {
            "$ref": "#/entities/Result"
          },
          "description": "Stores results for each user."
        }
      }
    ],
    "reasoning": "The Firestore structure is updated to support distinct test types. A top-level 'tests' collection holds metadata for each test (e.g., 'reading', 'listening'), including total time. Each test document then contains a 'problems' subcollection, providing a clear, hierarchical structure for managing questions. This is more scalable and organized than a single, flat 'problems' collection."
  }
}
