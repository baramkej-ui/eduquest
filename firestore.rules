rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can access and modify their own profile.
     * @deny (create) - User cannot create a profile with a userId that does not match their auth UID.
     * @deny (list) - Listing all users is disallowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages educational problems.
     * @path /problems/{problemId}
     * @allow (get, list) - Public read access for all problems.
     * @allow (create, update, delete) - Only authenticated users can manage problems.
     * @deny (create) - Non-authenticated users cannot create problems.
     * @principle Allows public read access with owner-only writes.
     */
    match /problems/{problemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages user-specific results.
     * @path /users/{userId}/results/{resultId}
     * @allow (create, get, update, delete) - Authenticated user can manage their own results.
     * @deny (create) - User cannot create results under another user's ID.
     * @deny (list) - Listing all results is disallowed for non-admin users.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/results/{resultId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}