/**
 * @description This ruleset enforces a user-ownership model for user profiles and results,
 *              while providing admin access to all data and public read access to problems.
 * @dataStructure
 *   - /users/{userId}: Stores user profiles, accessible only to the user and admins.
 *   - /problems/{problemId}: Stores educational problems, publicly readable, but manageable only by admins.
 *   - /users/{userId}/results/{resultId}: Stores user-specific results, accessible only to the user and admins.
 * @keySecurityDecisions
 *   - User listing is restricted to admins.
 *   - Public read access is granted to the /problems collection.
 *   - Data validation is minimal to allow for rapid prototyping and flexible data shapes.
 * @denormalizationForAuthorization None.  Sufficient path-based authorization is in place.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.uid == 'PWsFb5BMbKa6xu9VPeVKhiJH2MF2';
    }

    /**
     * @description Manages user profiles, accessible only to the user and admins.
     * @path /users/{userId}
     * @allow (get) User 'user123' can read their own profile.
     * @allow (create) User 'user123' can create their profile if the ID matches.
     * @deny (get) User 'user456' cannot read 'user123' profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isAdmin();
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Manages educational problems, publicly readable, but manageable only by admins.
     * @path /problems/{problemId}
     * @allow (get) Any user can read a problem.
     * @allow (list) Any user can list problems.
     * @allow (create) Admin can create a problem.
     * @deny (create) Non-admin users cannot create problems.
     * @principle Public read access with owner-only (admin) writes.
     */
    match /problems/{problemId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Stores user-specific results, accessible only to the user and admins.
     * @path /users/{userId}/results/{resultId}
     * @allow (get) User 'user123' can read their own result.
     * @allow (create) User 'user123' can create a result under their ID.
     * @deny (get) User 'user456' cannot read 'user123' results.
     * @principle Enforces document ownership via path for reads and writes.
     */
    match /users/{userId}/results/{resultId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }
  }
}