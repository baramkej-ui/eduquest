/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for user profiles and results,
 * while allowing broader access for managing educational problems.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves or admins.
 * - /problems/{problemId}: Stores educational problems, manageable by admins.
 * - /users/{userId}/results/{resultId}: Stores results, owned by the user.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles and results.
 * - Admins have full CRUD access to all data.
 * - Problems are publicly readable, but only modifiable by admins.
 * - Listing all users is denied to non-admins to protect user privacy.
 *
 * Denormalization for Authorization:
 * - The `Result` entity contains the `userId`, eliminating the need to query the parent `/users/{userId}` document for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Only the user or an admin can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching userId: request.auth.uid == userId
     * @allow (get) - Authenticated user reads their own profile: request.auth.uid == userId
     * @allow (update) - Authenticated user updates their own profile: request.auth.uid == userId
     * @allow (delete) - Authenticated user deletes their own profile: request.auth.uid == userId
     * @deny (create) - Authenticated user tries to create a profile with a mismatched userId: request.auth.uid != userId
     * @deny (get) - Unauthenticated user tries to read a profile.
     * @principle Enforces document ownership for writes, requires authentication for reads.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Manages educational problems. Problems are publicly readable, but only admins can create, update, or delete them.
     * @path /problems/{problemId}
     * @allow (get) - Any user can read a problem.
     * @allow (list) - Any user can list problems.
     * @deny (create) - Non-admin user tries to create a problem.
     * @deny (update) - Non-admin user tries to update a problem.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /problems/{problemId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add admin validation once roles are set up
      allow update: if false; // TODO: Add admin validation once roles are set up
      allow delete: if false; // TODO: Add admin validation once roles are set up
    }

    /**
     * @description Manages user-specific results. Only the user can manage their own results.
     * @path /users/{userId}/results/{resultId}
     * @allow (create) - Authenticated user creates a result under their userId: request.auth.uid == userId
     * @allow (get) - Authenticated user reads a result under their userId: request.auth.uid == userId
     * @allow (update) - Authenticated user updates a result under their userId: request.auth.uid == userId
     * @allow (delete) - Authenticated user deletes a result under their userId: request.auth.uid == userId
     * @deny (create) - Authenticated user tries to create a result under a different userId: request.auth.uid != userId
     * @deny (update) - Authenticated user tries to update a result under a different userId.
     * @principle Enforces path-based ownership for all operations.
     */
    match /users/{userId}/results/{resultId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}