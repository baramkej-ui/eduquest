/**
 * @file Firestore Security Rules for EduQuest Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data (results),
 * while allowing public read access to problems. Administrative roles are not yet implemented.
 *
 * @data_structure
 * - `/users/{userId}`: Stores user profiles, with 'userId' as the document ID.
 * - `/problems/{problemId}`: Stores educational problems, publicly readable.
 * - `/users/{userId}/results/{resultId}`: Stores user-specific results, accessible only by the owning user.
 *
 * @key_security_decisions
 * - User listing is implicitly allowed (due to missing explicit restrictions).
 * - Problems are publicly readable, but writable only by authorized roles (currently disabled).
 * - The default security posture is strict: any access not explicitly allowed is denied.
 *
 * @denormalization_for_authorization No denormalization is required as authorization decisions are based
 * solely on the document path and authenticated user ID.
 *
 * @structural_segregation User-specific data (results) is stored in a subcollection, separate from
 * public data (problems).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list) Authenticated user can read their own profile.
     * @deny (create) If the userId does not match the authenticated user's uid.
     * @deny (update, delete) Only the authenticated user can update or delete their profile, not others.
     * @principle Enforces document ownership and authenticated access to user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages educational problems; accessible to all for reading.  Write access is disabled in this prototype.
     * @path /problems/{problemId}
     * @allow (get, list) Anyone can read the problems.
     * @deny (create, update, delete) No write permissions are granted in this version.
     * @principle Public read access with restricted write access.
     */
    match /problems/{problemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based write validation (e.g., admin, teacher).
    }

    /**
     * @description Manages user-specific results.
     * @path /users/{userId}/results/{resultId}
     * @allow (create) Authenticated user can create their own result if the userId matches their auth.uid.
     * @allow (get, list) Authenticated user can read their own results.
     * @deny (create) If the userId does not match the authenticated user's uid.
     * @deny (update, delete) Only the authenticated user can update or delete their result, not others.
     * @principle Enforces document ownership and authenticated access to user results.
     */
    match /users/{userId}/results/{resultId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}