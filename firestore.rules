/**
 * @fileOverview Firestore Security Rules for EduQuest application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and results,
 * with role-based access control for managing problems.  It prioritizes
 * authorization and integrity while relaxing validation constraints for rapid
 * prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'userId' as the document ID.
 * - /problems/{problemId}: Stores educational problems, with 'problemId' as the document ID.
 * - /users/{userId}/results/{resultId}: Stores user results, with path-based ownership enforced.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed, except for admin roles (not yet implemented).
 * - Data validation is minimized to essential checks for ownership and relational integrity.
 * - Write operations require authentication.
 * - No timestamp validation is enforced in this prototype.
 *
 * Denormalization for Authorization:
 * - The 'Result' entity includes both 'userId' and 'problemId', avoiding the need for
 *   expensive `get()` calls to parent documents during authorization.
 *
 * Structural Segregation:
 * - User profiles and problems are stored in separate top-level collections to simplify
 *   access control and optimize queries. User-specific results are stored in a subcollection
 *   under the user's profile.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, list) - Authenticated user can read their own profile
     * @allow (update, delete) - Authenticated user can update their profile if the userId matches their auth UID.
     * @deny (create) - User attempts to create a profile with a different userId.
     * @deny (update, delete) - User attempts to modify a profile with a different userId or a non-existent profile.
     * @principle Enforces user-ownership; only the authenticated user can manage their own profile.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to educational problems.
     * @path /databases/{database}/documents/problems/{problemId}
     * @allow (get, list) - Any user can read the problems.
     * @deny (create, update, delete) - Only admins or teachers can manage problems (not yet implemented).
     * @principle Public read, owner-only writes (not yet implemented).
     */
    match /problems/{problemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin/teacher role check
    }

    /**
     * @description Controls access to user results.
     * @path /databases/{database}/documents/users/{userId}/results/{resultId}
     * @allow (create) - Authenticated user can create a result under their own user ID.
     * @allow (get, list) - Authenticated user can read their own results.
     * @allow (update, delete) - Authenticated user can update their result if the userId matches their auth UID and the document exists.
     * @deny (create) - User attempts to create a result under a different user ID.
     * @deny (update, delete) - User attempts to modify a result with a different user ID or a non-existent result.
     * @principle Enforces path-based ownership; only the authenticated user can manage their own results.
     */
    match /users/{userId}/results/{resultId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}