/**
 * @fileOverview Firestore Security Rules for EduQuest application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user-specific data (results),
 * and role-based access control for other data (problems). It prioritizes security by
 * strictly limiting access based on user identity and role. Flexible data shapes are permitted during this phase to accelerate iterations.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase auth UID.
 * - /problems/{problemId}: Stores educational problems, accessible to admins and teachers.
 * - /users/{userId}/results/{resultId}: Stores user-specific results. Only the owning user can manage their results.
 *
 * Key Security Decisions:
 * - Users cannot be listed by non-admins.
 * - Problems are publicly readable but can only be managed by admins and teachers.
 * - Strict ownership is enforced for user results.
 * - Data validation is minimized to authorization checks.
 *
 * Denormalization for Authorization:
 *   The 'results' subcollection leverages path-based ownership: the path `/users/{userId}/results/{resultId}` inherently ties the result to a specific user.
 *   No denormalized `userId` field within the result document is strictly necessary for authorization, although including it can be helpful for data querying.
 *
 * Structural Segregation:
 *   User profiles and problems are stored in separate top-level collections, while results are stored in user-specific subcollections.
 *   This segregation simplifies access control and improves query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the user themselves or an admin can read/write their profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile at /users/user123.
     * @allow (get) - User with UID 'user123' can read their own profile at /users/user123.
     * @allow (update) - User with UID 'user123' can update their own profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) - User with UID 'user456' cannot read the profile at /users/user123.
     * @deny (update) - User with UID 'user456' cannot update the profile at /users/user123.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isAdmin();
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for educational problems. Publicly readable, but only admins/teachers can create, update, or delete.
     * @path /problems/{problemId}
     * @allow (get) - Any user can read a problem at /problems/problem123.
     * @allow (list) - Any user can list problems.
     * @allow (create) - User with admin/teacher role can create a problem at /problems/problem123.
     * @allow (update) - User with admin/teacher role can update a problem at /problems/problem123.
     * @deny (create) - User without admin/teacher role cannot create a problem.
     * @deny (update) - User without admin/teacher role cannot update a problem.
     * @principle Restricts write access to admins and teachers, allows public read access.
     */
    match /problems/{problemId} {
      allow get, list: if true;
      allow create: if isAdmin() || isTeacher();
      allow update: if isExistingAdmin() || isExistingTeacher();
      allow delete: if isExistingAdmin() || isExistingTeacher();
    }

    /**
     * @description Enforces access control for user-specific problem results. Only the owning user can manage their results.
     * @path /users/{userId}/results/{resultId}
     * @allow (create) - User with UID 'user123' can create a result at /users/user123/results/result1.
     * @allow (get) - User with UID 'user123' can read their own result at /users/user123/results/result1.
     * @allow (update) - User with UID 'user123' can update their own result at /users/user123/results/result1.
     * @deny (create) - User with UID 'user456' cannot create a result at /users/user123/results/result1.
     * @deny (get) - User with UID 'user456' cannot read the result at /users/user123/results/result1.
     * @deny (update) - User with UID 'user456' cannot update the result at /users/user123/results/result1.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/results/{resultId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    //--------------------------------------------------------------------------
    // Helper functions
    //--------------------------------------------------------------------------

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the requesting user is the owner of the existing resource.
      * @param {string} userId The user ID to check against.
      * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
    }

    /**
      * @description Checks if the existing resource's user has the 'admin' role.
      * @return {boolean} True if the user is an admin and the resource exists, false otherwise.
      */
    function isExistingAdmin() {
        return isAdmin() && resource != null;
    }

    /**
     * @description Checks if the user has the 'teacher' role.
     * @return {boolean} True if the user is a teacher, false otherwise.
     */
    function isTeacher() {
        return isSignedIn() && request.auth.token.role == 'teacher';
    }

    /**
      * @description Checks if the existing resource's user has the 'teacher' role.
      * @return {boolean} True if the user is a teacher and the resource exists, false otherwise.
      */
    function isExistingTeacher() {
        return isTeacher() && resource != null;
    }
  }
}